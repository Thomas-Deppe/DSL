init 
idle

Mouse_Instruct

Timer_Instruct

Branch_Instruct_equals

inc A A //Increments A and stores to A

sw A 01 //Stores A into address 02

deref A //Reads memory ADDR stored in reg A

lw B 01 //loads value at addres 02 to reg B

breq A B Branch_Instruct_Greater //Branch to address. Load Basic_Instruct_bgtq with ADDR if reg A equal to reg B

idle

Branch_Instruct_Greater

inc A A //Increments A and stores to A

bgtq A B Branch_Instruct_Less //Branch to address. load to Mouse_Instruct with ADDR if reg A greater than reg B

idle

Branch_Instruct_Less

dec A A

inc B B

bltq A B Call_Instruct //Branch to address. load to Timer_Instruct with ADDR if reg A less than reg B

idle //Goes to idle state

Call_Instruct

func ALU_Instruct

deref B //Reads memory ADDR stored in reg B

deref A //Reads memory ADDR stored in reg A

goto Mouse_Instruct

ALU_Instruct

add A B

sub B A

mul A B

sl A

sr B

inc A A

dec B A 

ret //pops stack address into program counter